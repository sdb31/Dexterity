function Knob_Analysis_Suite(varargin)
set(0,'units','centimeters');
pos = get(0,'screensize');  
h = 0.3*pos(4);
w = 5*h/3;  

handles.fig = figure('numbertitle','off',...
    'name','Knob Analysis',...
    'units','centimeters', 'Toolbar', 'none',...
    'Position',[pos(3)/2-w/2, pos(4)/2-h/2, w, h]);
handles.Subject_Timeline = uicontrol(handles.fig,'style','pushbutton',...
    'units','normalized',...
    'Position',[.2,.55,.6,.3],...
    'string','View Subject Timeline',...
    'fontsize',12);      
handles.Analyze_Group_Data = uicontrol(handles.fig,'style','pushbutton',...
    'units','normalized',...
    'Position',[.2,.15,.6,.3],...
    'string','Analyze Group Data',...
    'fontsize',12);
set(handles.Subject_Timeline, 'callback', @SubjectTimeline);
set(handles.Analyze_Group_Data, 'callback', @AnalyzeGroupData);
guidata(handles.fig, handles);

end

function SubjectTimeline(hObject,~)
handles = guidata(hObject);
%% Select Subject
% set(0,'units','centimeters');
% pos = get(0,'screensize');  
% h = 0.6*pos(4);
% w = 5*h/3;  
% handles.fig2 = figure( 'numbertitle','off',...
%     'name','Select Subject',...
%     'units','centimeters', 'Toolbar', 'none',...
%     'Position',[pos(3)/2-w/2, pos(4)/2-h/2, w, h]);
% handles.Set_Datapath = uicontrol(handles.fig2,'style','pushbutton',...
%     'units','normalized',...
%     'Position',[.75,.85,.2,.1],...
%     'string','Set Datapath',...
%     'fontsize',12);
% handles.label =  uicontrol(handles.fig2,'style','text',...
%     'units','normalized',...
%     'position',[0.01,0.95,0.98,0.04],...
%     'string','Parameter:',...
%     'fontsize',0.7*h,...
%     'backgroundcolor',get(handles.fig,'color'),...
%     'horizontalalignment','left',...
%     'fontweight','bold');         
% 
% set(handles.Set_Datapath, 'callback', @SetDatapath);
%% Find the path containing the MotoTrak Analysis program.
if isdeployed                                                               %If this is deployed code...
    progpath = [pwd '\'];                                                   %The default data path will begin with the current directory...
else                                                                        %Otherwise, if we're evaluating code or running an *.m file...
    temp = mfilename('fullpath');                                           %Grab the current *.m filename.
    if isempty(temp)                                                        %If we're evaluating code...
        progpath = which('NeuroTriage_Analysis.m');                         %Find the path containing the current folder.
        progpath(find(progpath == '\',1,'last')+1:end) = [];                %Kick out everything after the path.
    else
        progpath = temp(1:find(temp == '\',1,'last'));                      %Pull the path out of the m-file name.
    end
end
   
%% Have the user choose a path containing data files to analyze.
datapath = 'C:\MotoTrak\';                                                  %Set the expected primary local data path for saving data files.
if ~exist(datapath,'dir')                                                   %If the primary local data path doesn't exist...
    datapath = pwd;                                                         %Set the default path to the current directory.
end
datapath = uigetdir(datapath,'Where is your MotoTrak data located?');       %Ask the user where their data is located.
if datapath(1) == 0                                                         %If the user pressed "cancel"...
    return                                                                  %Skip execution of the rest of the function.
end

%% Find all of the MotoTrak data files in the data path.
files = file_miner(datapath,'*.ArdyMotor');                                 %Find all LPS *.ArdyMotor files in the LPS folders.
pause(0.01);                                                                %Pause for 10 milliseconds.
if isempty(files)                                                           %If no files were found...
    errordlg('No MotoTrak data files were found in the that directory!');   %Show an error dialog box.
end

%% Have the user select rats to include or exclude in the analysis.
rats = files;                                                               %Copy the filenames to another cell array.
for r = 1:length(rats)                                                      %Step through each file.
    rats{r}(1:find(rats{r} == '\' | rats{r} == '/',1,'last')) = [];         %Kick out the path from the filename.
    i = strfind(rats{r},'_20');                                             %Find the start of the timestamp.
    if isempty(i) || length(i) > 1                                          %If no timestamp was found in the filename, or multiple timestamps were found...
        rats{r} = [];                                                       %Set the rat name to empty brackets.
    else                                                                    %Otherwise...
        rats{r}(i:end) = [];                                                %Kick out all characters of the filename except the rat name.
    end
end
rat_list = unique(rats);                                                    %Make a list of all the unique rat names.
i = listdlg('PromptString','Which rat would you like to analyze?',...
    'name','Select Subject',...
    'SelectionMode','multiple',...
    'listsize',[400 250],...
    'initialvalue',1:length(rat_list),...
    'uh',25,...
    'ListString',rat_list);                                                 %Have the user pick rats to include.
if isempty(i)                                                               %If the user clicked "cancel" or closed the dialog...
    return                                                                  %Skip execution of the rest of the function.
else                                                                        %Otherwise...
    rat_list = rat_list(i);                                                 %Pare down the rat list to those that the user selected.
end
keepers = ones(length(rats),1);                                             %Create a matrix to check which files match the selected rat names.
for r = 1:length(rats)                                                      %Step through each file's rat name.
    if ~any(strcmpi(rat_list,rats{r})) && ~isempty(rats{r})                 %If this file's rat name wasn't selected and a rat name was found in the filename...
        keepers(r) = 0;                                                     %Mark the file for exclusion.
    end
end
files(keepers == 0) = [];                                                   %Kick out all files the user doesn't want to include.

%% Step through all of the data files and load them into a structure.
set(0,'units','centimeters');                                               %Set the system units to centimeters.
pos = get(0,'Screensize');                                                  %Grab the screensize.
h = 2;                                                                      %Set the height of the figure.
w = 15;                                                                     %Set the width of the figure.
fig = figure('numbertitle','off','name','Loading MotoTrak Files...',...
    'units','centimeters','Position',[pos(3)/2-w/2, pos(4)/2-h/2, w, h],...
    'menubar','none','resize','off');                                       %Create a figure to show the progress of reading in the files.
ax = axes('units','centimeters','position',[0.25,0.25,w-0.5,h/2-0.3],...
    'parent',fig);                                                          %Create axes for showing loading progress.
obj = fill([0 1 1 0 0],[0 0 1 1 0],'b','edgecolor','k');                    %Create a fill object to show loading progress.
set(ax,'xtick',[],'ytick',[],'box','on','xlim',[0,length(files)],...
    'ylim',[0,1]);                                                          %Set the axis limits and ticks.
txt = uicontrol(fig,'style','text','units','centimeters',...
    'position',[0.25,h/2+0.05,w-0.5,h/2-0.3],'fontsize',8,...
    'horizontalalignment','left','backgroundcolor',get(fig,'color'));       %Create a text object to show which file is being loaded.
data = [];                                                                  %Create a structure to receive data.
for f = 1:length(files)                                                     %Step through the data files.
    a = find(files{f} == '\',1,'last');                                     %Find the last forward slash in the filename.
    temp = files{f}(a+1:end);                                               %Grab the filename minus the path.
    if ishandle(fig)                                                        %If the user hasn't closed the waitbar figure...
        set(txt,'string',...
            [sprintf('Loading (%1.0f/%1.0f): ',[f,length(files)]) temp]);   %Update the waitbar figure.
        set(obj,'xdata',f*[0 1 1 0 0]);                                     %Update the x-coordinates for the fill object.
        drawnow;                                                            %Update the plot immediately.
    else                                                                    %Otherwise, if the user has closed the waitbar...
        return                                                              %Skip execution of the rest of the function.
    end
    try                                                                     %Try to read in the data file...
        temp = ArdyMotorFileRead(files{f});                                 %Read in the data from each file.
    catch err                                                               %If an error occurs...
        warning(['ERROR READING: ' files{f}]);                              %Show which file had a read problem...
        warning(err.message);                                               %Show the actual error message.
    end
    if isfield(temp,'trial') && length(temp.trial) >= 5 && ...
            any(strcmpi(rat_list,temp.rat))                                 %If there were at least 5 trials...        
        s = length(data) + 1;                                               %Create a new field index.
        for field = {'rat','device','stage'}                               %Step through the fields we want to save from the data file...
            data(s).(field{1}) = temp.(field{1});                           %Grab each field from the data file and save it.
        end
        data(s).outcome = char([temp.trial.outcome]');                      %Grab the outcome of each trial.
        data(s).thresh = [temp.trial.thresh]';                              %Grab the threshold for each trial.
        data(s).starttime = [temp.trial.starttime]';                        %Grab the start time for each trial.
        data(s).peak = nan(length(temp.trial),1);                           %Create a matrix to hold the peak force.
        for t = 1:length(temp.trial)                                        %Step through every trial.
            i = (temp.trial(t).sample_times >= 0 & ...
                temp.trial(t).sample_times < 1000*temp.trial(t).hitwin);    %Find the indices for samples in the hit window.
            if any(i ~= 0)                                                  %If there's any samples...
                data(s).peak(t) = max(temp.trial(t).signal(i));             %Find the maximum force in each hit window.
                data(s).impulse(t) = max(diff(temp.trial(t).signal(i)));    %Find the maximum impulse in each hit window.
            end
        end
        data(s).timestamp = data(s).starttime(1);                           %Grab the timestamp from the start of the first trial.
    end
end
if ishandle(fig)                                                            %If the user hasn't closed the waitbar figure...
    close(fig);                                                             %Close the waitbar figure.
    drawnow;                                                                %Immediately update the figure to allow it to close.
end
if isempty(data)                                                            %If no data files were found...
    errordlg(['There were no MotoTrak data files with 5 or more trials '...
        'for the selected rats!']);                                         %Show an error dialog box.
end
[~,i] = sort([data.timestamp]);                                             %Find the indices to sort all files chronologically.
data = data(i);                                                             %Sort all files chronologically.
devices = unique({data.device});                                            %Grab the unique device names across all sessions.
guidata(handles.fig,handles);
end

function AnalyzeGroupData(hObject,~)
handles = guidata(hObject);
figure; plot(linspace(1,100),sin(linspace(1,100)));
guidata(handles.fig,handles);
end

function SetDatapath(hObject,~)
handles = guidata(hObject);
[files, path] = uigetfile('*.ArdyMotor','Select MotoTrak Files',...
    'multiselect','off');
end